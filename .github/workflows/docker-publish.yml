name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:
  workflow_dispatch:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: python-test
  # Registry. Use docker.io for DockerHub
  DOCKER_REGISTRY: docker.pkg.github.com
  CONTAINER_REGISTRY: ghcr.io

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push-to-docker-v1:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    #if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      # https://github.com/docker/login-action
      - name: Login to ${{ env.DOCKER_REGISTRY }}
        uses: docker/login-action@v1 
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image version
        id: version
        run: |
          IMAGE_ID=$DOCKER_REGISTRY/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$VERSION"

      # https://github.com/docker/build-push-action
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.version.outputs.image }}:${{ steps.version.outputs.tag }}
          
  push-to-containers-v2:
  # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    #if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      # https://github.com/docker/login-action
      - name: Login to ${{ env.CONTAINER_REGISTRY }}
        uses: docker/login-action@v1 
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image version
        id: version
        run: |
          IMAGE_ID=$CONTAINER_REGISTRY/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          echo "::set-output name=image::$IMAGE_ID"
          echo "::set-output name=tag::$VERSION"

      # https://github.com/docker/build-push-action
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ steps.version.outputs.image }}:${{ steps.version.outputs.tag }}
